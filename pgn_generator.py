from typing import List
import chess
from repertoire_node import RepertoireNode


class PGNGenerator:
    def __init__(self, include_score_comments: bool = True):
        self.include_score_comments = include_score_comments
    
    def generate_pgn(self, root: RepertoireNode, title: str = "Chess Repertoire") -> str:
        pgn_lines = [
            f'[Event "{title}"]',
            '[Site "Generated by Chess Repertoire Generator"]',
            '[Date "????.??.??"]',
            '[Round "?"]',
            '[White "?"]',
            '[Black "?"]',
            '[Result "*"]'
        ]
        
        # Add FEN if starting from arbitrary position
        if root.move == "Position":
            pgn_lines.append(f'[FEN "{root.fen}"]')
            pgn_lines.append('[SetUp "1"]')
        
        pgn_lines.append('')

        moves_string = self._format_moves(root)
        pgn_lines.append(moves_string + " *")

        return '\n'.join(pgn_lines)

    def _format_moves(self, node: RepertoireNode) -> str:
        if not node:
            return ""
        
        if node.move == "Position":
            # Starting from arbitrary position - determine move number and turn
            board = chess.Board(node.fen)
            move_number = board.fullmove_number
            is_white_turn = board.turn == chess.WHITE
            
            # Format children directly since we're starting from a position
            moves_str = self._format_children_of(node, move_number, is_white_turn)
            return moves_str.strip()
        else:
            # Starting from opening move (original behavior)
            moves_str = f"1. {node.move}"
            
            # Add score comment for opening move if available and enabled
            if node.score_details and self.include_score_comments:
                moves_str += f" {node.score_details.format_comment()}"
            
            moves_str += self._format_children_of(node, 1, False)
            return moves_str

    def _format_children_of(self, parent_node: RepertoireNode, move_number: int, is_white_turn: bool) -> str:
        if not parent_node.children:
            # Add termination comment if this node has a termination reason
            if parent_node.termination_reason:
                return f" {{ {parent_node.termination_reason} }}"
            return ""

        # Separate mainline and sidelines
        mainline_node = None
        sideline_nodes = []
        for child in sorted(parent_node.children, key=lambda x: not x.is_mainline):
            if child.is_mainline and not mainline_node:
                mainline_node = child
            else:
                sideline_nodes.append(child)

        # 1. Format the mainline move text with score comment
        mainline_move_text = ""
        if mainline_node:
            if is_white_turn:
                mainline_move_text += f" {move_number}. {mainline_node.move}"
            else:
                mainline_move_text += f" {mainline_node.move}"
            
            # Add score comment if available and enabled
            if mainline_node.score_details and self.include_score_comments:
                mainline_move_text += f" {mainline_node.score_details.format_comment()}"
        
        # 2. Format all sideline variations for the current move
        variations_text = ""
        for sideline in sideline_nodes:
            variations_text += " ("
            if is_white_turn:
                variations_text += f"{move_number}. {sideline.move}"
            else:
                variations_text += f"{move_number}... {sideline.move}"
            
            # Add score comment for sideline if available and enabled
            if sideline.score_details and self.include_score_comments:
                variations_text += f" {sideline.score_details.format_comment()}"
            
            # Recursively format the branch for this variation
            variations_text += self._format_children_of(
                sideline,
                move_number + (1 if not is_white_turn else 0),
                not is_white_turn
            )
            variations_text += ")"

        # 3. Get the rest of the mainline
        rest_of_mainline = ""
        if mainline_node:
            rest_of_mainline += self._format_children_of(
                mainline_node,
                move_number + (1 if not is_white_turn else 0),
                not is_white_turn
            )
            
        return mainline_move_text + variations_text + rest_of_mainline
